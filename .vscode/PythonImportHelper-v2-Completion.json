[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "faiss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "faiss",
        "description": "faiss",
        "detail": "faiss",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "recommend",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def recommend(title: str, top_n=5):\n    \"\"\"Get top-N recommendations based on drama title.\"\"\"\n    # Find the drama in metadata\n    drama = next((m for m in metadata if m[\"Title\"].lower() == title.lower()), None)\n    if not drama:\n        print(f\" Drama '{title}' not found in dataset.\")\n        return []\n    # Create query embedding\n    query_text = f\"{drama['Title']} {drama['Genre']} {drama['Description']} {drama['Cast']}\"\n    query_emb = model.encode([query_text], convert_to_numpy=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "MODEL_NAME = \"paraphrase-multilingual-mpnet-base-v2\"\nMODEL_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\models\"\nINDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\n# ======================================================\n# 2️⃣ Load model and FAISS index\n# ======================================================\nprint(\" Loading model and FAISS index...\")\nmodel = SentenceTransformer(MODEL_NAME, cache_folder=MODEL_DIR)\nindex = faiss.read_index(os.path.join(INDEX_DIR, \"index.faiss\"))\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"rb\") as f:",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "MODEL_DIR",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "MODEL_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\models\"\nINDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\n# ======================================================\n# 2️⃣ Load model and FAISS index\n# ======================================================\nprint(\" Loading model and FAISS index...\")\nmodel = SentenceTransformer(MODEL_NAME, cache_folder=MODEL_DIR)\nindex = faiss.read_index(os.path.join(INDEX_DIR, \"index.faiss\"))\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"rb\") as f:\n    metadata = pickle.load(f)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "INDEX_DIR",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "INDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\n# ======================================================\n# 2️⃣ Load model and FAISS index\n# ======================================================\nprint(\" Loading model and FAISS index...\")\nmodel = SentenceTransformer(MODEL_NAME, cache_folder=MODEL_DIR)\nindex = faiss.read_index(os.path.join(INDEX_DIR, \"index.faiss\"))\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"rb\") as f:\n    metadata = pickle.load(f)\nprint(\" Model and index loaded!\")",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "model = SentenceTransformer(MODEL_NAME, cache_folder=MODEL_DIR)\nindex = faiss.read_index(os.path.join(INDEX_DIR, \"index.faiss\"))\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"rb\") as f:\n    metadata = pickle.load(f)\nprint(\" Model and index loaded!\")\n# ======================================================\n# 3️⃣ Helper: Recommend function\n# ======================================================\ndef recommend(title: str, top_n=5):\n    \"\"\"Get top-N recommendations based on drama title.\"\"\"",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "index = faiss.read_index(os.path.join(INDEX_DIR, \"index.faiss\"))\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"rb\") as f:\n    metadata = pickle.load(f)\nprint(\" Model and index loaded!\")\n# ======================================================\n# 3️⃣ Helper: Recommend function\n# ======================================================\ndef recommend(title: str, top_n=5):\n    \"\"\"Get top-N recommendations based on drama title.\"\"\"\n    # Find the drama in metadata",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "remove_refs",
        "kind": 2,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "def remove_refs(text):\n    \"\"\"Remove all reference markers like [1], [ko], [citation needed].\"\"\"\n    return re.sub(r'\\[.*?\\]', '', str(text))\ndef clean_multiline(text):\n    \"\"\"Convert multiline text to properly comma-separated clean string.\"\"\"\n    if not text or str(text).strip().lower() in [\"n/a\", \"na\"]:\n        return \"-\"\n    text = remove_refs(text)\n    parts = re.split(r'[\\n\\r]+', str(text))\n    parts = [p.strip() for p in parts if p.strip()]",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "clean_multiline",
        "kind": 2,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "def clean_multiline(text):\n    \"\"\"Convert multiline text to properly comma-separated clean string.\"\"\"\n    if not text or str(text).strip().lower() in [\"n/a\", \"na\"]:\n        return \"-\"\n    text = remove_refs(text)\n    parts = re.split(r'[\\n\\r]+', str(text))\n    parts = [p.strip() for p in parts if p.strip()]\n    return \", \".join(parts) if parts else \"-\"\ndef clean_description(desc):\n    \"\"\"Clean [1], etc. and normalize spaces.\"\"\"",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "clean_description",
        "kind": 2,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "def clean_description(desc):\n    \"\"\"Clean [1], etc. and normalize spaces.\"\"\"\n    if not desc:\n        return \"-\"\n    desc = remove_refs(desc)\n    desc = re.sub(r'\\s+', ' ', desc).strip()\n    return desc if desc else \"-\"\ndef extract_years_from_release(text):\n    \"\"\"Extract release year(s) from release date text.\"\"\"\n    if not text or str(text).strip().lower() in [\"n/a\", \"na\", \"-\"]:",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "extract_years_from_release",
        "kind": 2,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "def extract_years_from_release(text):\n    \"\"\"Extract release year(s) from release date text.\"\"\"\n    if not text or str(text).strip().lower() in [\"n/a\", \"na\", \"-\"]:\n        return \"-\"\n    text = remove_refs(text)\n    # Match 4-digit years (e.g., 2004, 2015, 2020)\n    years = re.findall(r'(19|20)\\d{2}', text)\n    # Join unique years (sorted in order of appearance)\n    if not years:\n        return \"-\"",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "get_description_fallback",
        "kind": 2,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "def get_description_fallback(url):\n    headers = {\n        \"User-Agent\": (\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n            \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n            \"Chrome/118.0.0.0 Safari/537.36\"\n        )\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=10)",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "chrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument(\"--no-sandbox\")\nchrome_options.add_argument(\"--disable-dev-shm-usage\")\ndriver = webdriver.Chrome(options=chrome_options)\n# ---------------------------\n# Wikipedia main list\n# ---------------------------\nbase_url = \"https://en.wikipedia.org/wiki/List_of_South_Korean_dramas\"\ndriver.get(base_url)",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "driver = webdriver.Chrome(options=chrome_options)\n# ---------------------------\n# Wikipedia main list\n# ---------------------------\nbase_url = \"https://en.wikipedia.org/wiki/List_of_South_Korean_dramas\"\ndriver.get(base_url)\ntime.sleep(3)\n# ---------------------------\n# Collect all drama links\n# ---------------------------",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "base_url = \"https://en.wikipedia.org/wiki/List_of_South_Korean_dramas\"\ndriver.get(base_url)\ntime.sleep(3)\n# ---------------------------\n# Collect all drama links\n# ---------------------------\nprint(\"Collecting drama links...\")\ndrama_links = []\nelems = driver.find_elements(By.CLASS_NAME, \"div-col\")\nfor elem in elems:",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "drama_links",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "drama_links = []\nelems = driver.find_elements(By.CLASS_NAME, \"div-col\")\nfor elem in elems:\n    links = elem.find_elements(By.CSS_SELECTOR, \"a[href]\")\n    for link in links:\n        href = link.get_attribute(\"href\")\n        if href and \"wiki\" in href and \"redlink\" not in href:\n            drama_links.append(href)\ndrama_links = list(set(drama_links))\nprint(f\"Found {len(drama_links)} drama links\")",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "elems",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "elems = driver.find_elements(By.CLASS_NAME, \"div-col\")\nfor elem in elems:\n    links = elem.find_elements(By.CSS_SELECTOR, \"a[href]\")\n    for link in links:\n        href = link.get_attribute(\"href\")\n        if href and \"wiki\" in href and \"redlink\" not in href:\n            drama_links.append(href)\ndrama_links = list(set(drama_links))\nprint(f\"Found {len(drama_links)} drama links\")\n# ---------------------------",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "drama_links",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "drama_links = list(set(drama_links))\nprint(f\"Found {len(drama_links)} drama links\")\n# ---------------------------\n# Scrape each drama page\n# ---------------------------\ntitles, alt_titles, writers, directors, casts, genres, networks, episodes, releases, release_years, posters, descriptions = [], [], [], [], [], [], [], [], [], [], [], []\nfor i, url in enumerate(drama_links[:100]):  # you can limit with [:10] for testing\n    print(f\"\\nScraping ({i+1}/{len(drama_links)}): {url}\")\n    driver.get(url)\n    time.sleep(1.5)",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "data_scrapper.scrapper",
        "description": "data_scrapper.scrapper",
        "peekOfCode": "df = pd.DataFrame({\n    \"Title\": titles,\n    \"Also Known As\": alt_titles,\n    \"Written By\": writers,\n    \"Director\": directors,\n    \"Cast\": casts,\n    \"Genre\": genres,\n    \"Network\": networks,\n    \"Episodes\": episodes,\n    \"Release Dates\": releases,",
        "detail": "data_scrapper.scrapper",
        "documentation": {}
    },
    {
        "label": "DATA_PATH",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "DATA_PATH = r\"D:\\Projects\\Kdrama-recomendation\\data_scrapper\\kdrama_dataset_detailed_v7.csv\"\nMODEL_NAME = \"paraphrase-multilingual-mpnet-base-v2\"\nMODEL_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\models\"\nINDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\nos.makedirs(MODEL_DIR, exist_ok=True)\nos.makedirs(INDEX_DIR, exist_ok=True)\nprint(\" Loading dataset...\")\ndf = pd.read_csv(DATA_PATH)\ndf.fillna(\"\", inplace=True)\n# Create a unified content column",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "MODEL_NAME = \"paraphrase-multilingual-mpnet-base-v2\"\nMODEL_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\models\"\nINDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\nos.makedirs(MODEL_DIR, exist_ok=True)\nos.makedirs(INDEX_DIR, exist_ok=True)\nprint(\" Loading dataset...\")\ndf = pd.read_csv(DATA_PATH)\ndf.fillna(\"\", inplace=True)\n# Create a unified content column\ndf[\"content\"] = (",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "MODEL_DIR",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "MODEL_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\models\"\nINDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\nos.makedirs(MODEL_DIR, exist_ok=True)\nos.makedirs(INDEX_DIR, exist_ok=True)\nprint(\" Loading dataset...\")\ndf = pd.read_csv(DATA_PATH)\ndf.fillna(\"\", inplace=True)\n# Create a unified content column\ndf[\"content\"] = (\n    df[\"Title\"].astype(str) + \" \" +",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "INDEX_DIR",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "INDEX_DIR = r\"D:\\Projects\\Kdrama-recomendation\\model_traning\\faiss_index\"\nos.makedirs(MODEL_DIR, exist_ok=True)\nos.makedirs(INDEX_DIR, exist_ok=True)\nprint(\" Loading dataset...\")\ndf = pd.read_csv(DATA_PATH)\ndf.fillna(\"\", inplace=True)\n# Create a unified content column\ndf[\"content\"] = (\n    df[\"Title\"].astype(str) + \" \" +\n    df[\"Genre\"].astype(str) + \" \" +",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "df = pd.read_csv(DATA_PATH)\ndf.fillna(\"\", inplace=True)\n# Create a unified content column\ndf[\"content\"] = (\n    df[\"Title\"].astype(str) + \" \" +\n    df[\"Genre\"].astype(str) + \" \" +\n    df[\"Description\"].astype(str) + \" \" +\n    df[\"Cast\"].astype(str)\n)\n# ======================================================",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "df[\"content\"]",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "df[\"content\"] = (\n    df[\"Title\"].astype(str) + \" \" +\n    df[\"Genre\"].astype(str) + \" \" +\n    df[\"Description\"].astype(str) + \" \" +\n    df[\"Cast\"].astype(str)\n)\n# ======================================================\n# 2️⃣ Load model\n# ======================================================\nprint(\" Loading SentenceTransformer model...\")",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "model = SentenceTransformer(MODEL_NAME, cache_folder=MODEL_DIR)\nprint(\" Model loaded!\")\n# ======================================================\n# 3️⃣ Generate embeddings\n# ======================================================\nprint(\" Generating embeddings...\")\nembeddings = model.encode(df[\"content\"].tolist(), show_progress_bar=True, convert_to_numpy=True)\n# ======================================================\n# 4️⃣ Build FAISS index\n# ======================================================",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "embeddings = model.encode(df[\"content\"].tolist(), show_progress_bar=True, convert_to_numpy=True)\n# ======================================================\n# 4️⃣ Build FAISS index\n# ======================================================\ndim = embeddings.shape[1]\nindex = faiss.IndexFlatIP(dim)  # Inner product (cosine similarity)\nfaiss.normalize_L2(embeddings)\nindex.add(embeddings)\nprint(f\"FAISS index built with {index.ntotal} items.\")\n# ======================================================",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "dim",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "dim = embeddings.shape[1]\nindex = faiss.IndexFlatIP(dim)  # Inner product (cosine similarity)\nfaiss.normalize_L2(embeddings)\nindex.add(embeddings)\nprint(f\"FAISS index built with {index.ntotal} items.\")\n# ======================================================\n# 5️⃣ Save index and metadata\n# ======================================================\nfaiss.write_index(index, os.path.join(INDEX_DIR, \"index.faiss\"))\nmeta_data = df[[\"Title\", \"Genre\", \"Description\", \"Cast\", \"Network\", \"Release Years\"]].to_dict(orient=\"records\")",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "index = faiss.IndexFlatIP(dim)  # Inner product (cosine similarity)\nfaiss.normalize_L2(embeddings)\nindex.add(embeddings)\nprint(f\"FAISS index built with {index.ntotal} items.\")\n# ======================================================\n# 5️⃣ Save index and metadata\n# ======================================================\nfaiss.write_index(index, os.path.join(INDEX_DIR, \"index.faiss\"))\nmeta_data = df[[\"Title\", \"Genre\", \"Description\", \"Cast\", \"Network\", \"Release Years\"]].to_dict(orient=\"records\")\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"wb\") as f:",
        "detail": "model_traning.build_index",
        "documentation": {}
    },
    {
        "label": "meta_data",
        "kind": 5,
        "importPath": "model_traning.build_index",
        "description": "model_traning.build_index",
        "peekOfCode": "meta_data = df[[\"Title\", \"Genre\", \"Description\", \"Cast\", \"Network\", \"Release Years\"]].to_dict(orient=\"records\")\nwith open(os.path.join(INDEX_DIR, \"meta.pkl\"), \"wb\") as f:\n    pickle.dump(meta_data, f)\nprint(\" Index and metadata saved successfully!\")",
        "detail": "model_traning.build_index",
        "documentation": {}
    }
]